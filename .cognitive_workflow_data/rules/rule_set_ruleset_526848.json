{
  "id": "ruleset_526848",
  "goal": "coder, please create a calculator program in `calculator.py` that can perform addition, subtraction, multiplication, and division.",
  "rules": [
    {
      "id": "rule_001",
      "name": "创建计算器核心功能",
      "condition": "项目启动，需要创建`calculator.py`文件",
      "action": "在`calculator.py`中，实现加法、减法、乘法和除法的核心函数。除法函数需要处理除以零的异常情况。",
      "agent_name": "coder",
      "priority": 100,
      "phase": "execution",
      "expected_outcome": "生成`calculator.py`文件，其中包含`add`, `subtract`, `multiply`, `divide`四个函数。`divide`函数能正确处理除零错误。",
      "metadata": {}
    },
    {
      "id": "rule_002",
      "name": "实现用户交互逻辑",
      "condition": "核心功能函数已在`calculator.py`中实现",
      "action": "在`calculator.py`中添加代码，以接收用户输入的两个数字和操作符，调用相应的核心函数进行计算，并打印结果。",
      "agent_name": "coder",
      "priority": 90,
      "phase": "execution",
      "expected_outcome": "程序可以从命令行运行，接受用户输入并正确显示计算结果。",
      "metadata": {}
    },
    {
      "id": "rule_003",
      "name": "编写单元测试用例",
      "condition": "计算器程序的功能代码已全部完成",
      "action": "创建一个测试文件（如`test_calculator.py`），为`calculator.py`中的每个核心函数编写单元测试，包括正常情况和除以零等边界情况。",
      "agent_name": "tester",
      "priority": 80,
      "phase": "execution",
      "expected_outcome": "生成一个测试文件，其中包含验证所有算术运算正确性的测试用例。",
      "metadata": {}
    },
    {
      "id": "rule_004",
      "name": "执行测试并完成目标",
      "condition": "所有代码和测试用例均已编写完成",
      "action": "运行所有单元测试。如果所有测试都通过，则宣布目标完成。如果存在失败的测试，则报告失败详情。",
      "agent_name": "tester",
      "priority": 70,
      "phase": "execution",
      "expected_outcome": "所有测试用例成功通过，证明程序功能符合要求，目标完成。",
      "metadata": {}
    }
  ],
  "version": 1,
  "status": "active",
  "modification_history": []
}