{
  "id": "ruleset_844748",
  "goal": "创建一个简单的计算器程序",
  "rules": [
    {
      "id": "rule_092646",
      "name": "分析计算器需求",
      "condition": "IF 任务是创建一个计算器程序，且具体功能尚未明确。",
      "action": "THEN 明确简单计算器的核心需求：1. 支持加、减、乘、除四种基本运算。2. 能够接收用户输入的两个数字和一个运算符。3. 能够处理无效输入（如非数字）和数学错误（如除以零）。4. 程序应能循环执行，直到用户选择退出。",
      "agent_name": "main_agent",
      "priority": 90,
      "phase": "information_gathering",
      "expected_outcome": "一份清晰的计算器功能规格说明文档。",
      "metadata": {}
    },
    {
      "id": "rule_058688",
      "name": "编写计算器核心代码",
      "condition": "IF 计算器的功能规格已经明确。",
      "action": "THEN 基于规格说明，编写一个命令行计算器程序。代码需要包含：1. 获取用户输入的函数。2. 一个主循环来持续接收计算任务。3. 使用if-elif-else或类似结构来根据运算符执行相应的计算。4. 使用try-except块来捕获并处理输入错误和除零错误。",
      "agent_name": "main_agent",
      "priority": 80,
      "phase": "execution",
      "expected_outcome": "一个功能完整的、可执行的计算器程序 Python 脚本。",
      "metadata": {}
    },
    {
      "id": "rule_258663",
      "name": "测试计算器功能与边界",
      "condition": "IF 计算器程序的核心代码已经编写完成。",
      "action": "THEN 设计并执行一系列测试用例来验证程序的正确性。测试应覆盖：1. 每个基本运算（例如 5 + 3, 10 - 2, 4 * 6, 8 / 2）。2. 边界情况（例如，使用0或负数进行计算）。3. 错误处理（例如，输入'a'代替数字，除数输入0）。",
      "agent_name": "main_agent",
      "priority": 70,
      "phase": "verification",
      "expected_outcome": "一份测试报告，总结所有测试用例的通过情况，并确认程序在正常和异常情况下都能按预期工作。",
      "metadata": {}
    },
    {
      "id": "rule_595834",
      "name": "最终代码审查与交付",
      "condition": "IF 计算器程序已通过所有功能和边界测试。",
      "action": "THEN 对代码进行最终审查，添加必要的注释以提高可读性，并整理代码结构。最后，将最终版本的、经过验证的计算器程序代码作为最终成果提交。",
      "agent_name": "main_agent",
      "priority": 60,
      "phase": "verification",
      "expected_outcome": "一份格式规范、注释清晰、经过完整验证的最终计算器源代码。",
      "metadata": {}
    }
  ],
  "version": 1,
  "status": "active",
  "modification_history": []
}