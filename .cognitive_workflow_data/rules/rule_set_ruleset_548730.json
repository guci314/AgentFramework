{
  "id": "ruleset_548730",
  "goal": "\n    开发一个简单的计算器程序，要求：\n    1. 实现加减乘除四个基本运算\n    2. 编写完整的单元测试\n    3. 运行测试，确保测试通过\n    4. 生成使用说明文档，使用markdown格式，文件保存在calculator.md\n    5. 文件保存在calculator.py\n    ",
  "rules": [
    {
      "id": "rule_795612",
      "name": "编写计算器核心代码及单元测试",
      "condition": "当接到开发一个带单元测试的计算器程序任务时",
      "action": "在单个文件 `calculator.py` 中，首先定义 `add`, `subtract`, `multiply`, `divide` 四个函数。然后在同一个文件中，使用 `unittest` 模块为这四个函数编写全面的单元测试，覆盖正常情况、边界情况（如除以零）和异常情况。确保代码和测试逻辑在同一个文件中。",
      "agent_name": "coder",
      "priority": 100,
      "phase": "execution",
      "expected_outcome": "生成一个名为 `calculator.py` 的文件，其中包含四个运算的函数实现和对应的 `unittest` 测试用例。",
      "metadata": {}
    },
    {
      "id": "rule_707480",
      "name": "运行单元测试并确保通过",
      "condition": "当 `calculator.py` 文件中的代码和单元测试编写完成后",
      "action": "执行 `calculator.py` 文件中定义的 `unittest` 测试套件。检查所有测试用例是否都已通过。如果存在失败的测试，分析失败原因，修改代码并重新运行测试，直到所有测试全部通过为止。",
      "agent_name": "coder",
      "priority": 90,
      "phase": "verification",
      "expected_outcome": "终端输出显示所有单元测试均已成功通过，无任何错误或失败信息。",
      "metadata": {}
    },
    {
      "id": "rule_967576",
      "name": "生成Markdown使用说明文档",
      "condition": "当所有单元测试验证通过，代码功能确认无误后",
      "action": "创建一个名为 `calculator.md` 的文件。使用 Markdown 格式编写一份清晰的使用说明文档，内容应包括：1. 程序简介；2. 如何运行代码和测试；3. 每个函数（加、减、乘、除）的功能说明和使用示例。",
      "agent_name": "coder",
      "priority": 80,
      "phase": "verification",
      "expected_outcome": "生成一个格式良好、内容清晰的 `calculator.md` 文件，准确描述了程序的功能和使用方法。",
      "metadata": {}
    },
    {
      "id": "recovery_447721",
      "name": "验证并重新生成Markdown文档",
      "condition": "当规则 '生成Markdown使用说明文档' 因 '执行结果验证失败' 而失败时",
      "action": "1. 检查文件系统中是否存在 `calculator.md` 文件。 2. 如果文件存在，请读取其内容并验证其是否为空或格式不正确。 3. 如果文件不存在或内容无效，请根据 `calculator.py` 中的代码（函数定义和注释）重新生成一份完整且格式正确的Markdown使用说明文档，并将其写入 `calculator.md` 文件。",
      "agent_name": "coder",
      "priority": 95,
      "phase": "execution",
      "expected_outcome": "一个名为 `calculator.md` 的文件被成功创建或修正，其内容是基于 `calculator.py` 生成的、完整且格式正确的Markdown文档。",
      "metadata": {}
    },
    {
      "id": "recovery_265148",
      "name": "检查文件系统写入权限",
      "condition": "当规则 '生成Markdown使用说明文档' 因 '执行结果验证失败' 而失败，且直接修复规则也失败时",
      "action": "1. 尝试在当前工作目录下创建一个名为 `permission_test.tmp` 的临时文件。 2. 向该文件中写入'test'字符串。 3. 读取文件内容，验证是否为'test'。 4. 删除该临时文件。 5. 根据操作成功与否，报告当前目录是否具有完整的文件写入、读取和删除权限。",
      "agent_name": "coder",
      "priority": 85,
      "phase": "execution",
      "expected_outcome": "明确当前工作目录的文件系统权限状态。如果权限正常，则可以继续尝试其他修复；如果存在权限问题，则能定位到根本原因。",
      "metadata": {}
    },
    {
      "id": "recovery_232543",
      "name": "确认源文件后重试文档生成",
      "condition": "当规则 '生成Markdown使用说明文档' 因 '执行结果验证失败' 而失败时",
      "action": "1. 确认 `calculator.py` 文件存在且内容不为空。 2. 如果源文件有效，则严格按照原始规则要求，再次尝试生成 `calculator.md` 文档。请确保在写入文件后增加一个短暂延时（例如1秒），然后再结束操作，以应对潜在的文件系统同步延迟问题。",
      "agent_name": "coder",
      "priority": 75,
      "phase": "execution",
      "expected_outcome": "成功生成 `calculator.md` 文件。通过增加延时，可以解决可能的瞬时性文件系统问题。",
      "metadata": {}
    },
    {
      "id": "recovery_327689",
      "name": "将文档内容直接输出作为备用方案",
      "condition": "当所有创建文件的尝试都失败后",
      "action": "1. 根据 `calculator.py` 的内容，在内存中生成完整的Markdown使用说明文档。 2. 不再尝试写入文件，而是将生成的Markdown全文内容直接输出到执行结果中。 3. 在输出的开头添加警告信息：'警告：无法创建 calculator.md 文件。以下是使用说明文档的内容：'",
      "agent_name": "coder",
      "priority": 65,
      "phase": "execution",
      "expected_outcome": "用户在执行结果中直接获得所需的Markdown文档内容，虽然文件未创建，但核心目标（提供文档）得以完成。",
      "metadata": {}
    }
  ],
  "version": 1,
  "status": "active",
  "modification_history": []
}