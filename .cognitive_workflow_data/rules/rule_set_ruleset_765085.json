{
  "id": "ruleset_765085",
  "goal": "\n    开发一个简单的计算器程序，要求：\n    1. 实现加减乘除四个基本运算\n    2. 编写完整的单元测试\n    3. 运行测试，确保测试通过\n    4. 生成使用说明文档，使用markdown格式，文件保存在calculator.md\n    5. 文件保存在calculator.py\n    ",
  "rules": [
    {
      "id": "rule_393327",
      "name": "需求分析与文件结构确认",
      "condition": "任务开始，需要明确所有开发和交付要求",
      "action": "分析目标中关于计算器功能（加减乘除）、文件命名（calculator.py, calculator.md）、单元测试要求和文档格式的所有细节，确保理解无误。",
      "agent_name": "coder",
      "priority": 90,
      "phase": "information_gathering",
      "expected_outcome": "对计算器功能、文件结构（calculator.py, calculator.md）和测试要求有清晰的理解。",
      "metadata": {}
    },
    {
      "id": "rule_758898",
      "name": "实现计算器核心功能",
      "condition": "已完成需求分析，准备开始编写代码",
      "action": "在`calculator.py`文件中实现加、减、乘、除四个基本运算函数。确保代码结构清晰，易于测试，并处理除数为零的异常情况。",
      "agent_name": "coder",
      "priority": 80,
      "phase": "execution",
      "expected_outcome": "生成`calculator.py`文件，包含所有基本运算的函数实现，并考虑了异常处理。",
      "metadata": {}
    },
    {
      "id": "rule_782263",
      "name": "生成使用说明文档",
      "condition": "计算器核心功能已初步实现，需要提供用户使用指南",
      "action": "根据`calculator.py`的功能，生成一份详细的Markdown格式使用说明文档，保存为`calculator.md`。文档应包含如何导入和使用这些函数，以及示例代码。",
      "agent_name": "coder",
      "priority": 75,
      "phase": "execution",
      "expected_outcome": "生成`calculator.md`文件，包含计算器程序的使用说明和示例。",
      "metadata": {}
    },
    {
      "id": "rule_475012",
      "name": "编写单元测试",
      "condition": "计算器核心功能已实现，需要验证其正确性",
      "action": "为`calculator.py`中的加、减、乘、除函数编写全面的单元测试用例。测试应覆盖正常情况、边界情况（如零、负数）和错误处理（如除数为零）。",
      "agent_name": "tester",
      "priority": 60,
      "phase": "verification",
      "expected_outcome": "生成包含所有必要测试用例的测试脚本，准备执行。",
      "metadata": {}
    },
    {
      "id": "rule_325535",
      "name": "运行测试并验证结果",
      "condition": "单元测试用例已编写完成，需要执行并确认功能正确",
      "action": "运行所有编写的单元测试。如果所有测试通过，则确认`calculator.py`功能正确；如果存在失败，则报告失败的测试用例和错误信息，并建议`coder`进行调试。",
      "agent_name": "tester",
      "priority": 50,
      "phase": "verification",
      "expected_outcome": "所有单元测试通过，确认`calculator.py`功能正确无误，或提供详细的测试失败报告。",
      "metadata": {}
    },
    {
      "id": "rule_371191",
      "name": "修正除零错误信息并重新测试",
      "condition": "当前阶段为verification，且单元测试执行结果为失败，失败详情指出test_divide的除零错误信息不匹配（实际为'除数不能为零。'，预期为'除数不能为零'）",
      "action": "修改calculator.py文件中divide函数的除零错误信息，将其从'除数不能为零。'修正为'除数不能为零'，以匹配单元测试的预期。修正后，重新运行所有单元测试。",
      "agent_name": "coder",
      "priority": 85,
      "phase": "verification",
      "expected_outcome": "calculator.py中的除零错误信息已修正，所有单元测试通过。",
      "metadata": {}
    },
    {
      "id": "recovery_507927",
      "name": "修正并重新生成完整的Markdown使用说明文档",
      "condition": "生成使用说明文档任务失败，且失败原因为“Markdown内容字符串不完整”或“缺少关键示例代码和部分格式化内容”，并且编程尝试状态为“超过最大尝试次数”。",
      "action": "指示 `coder` 智能体：\n1. **重新生成** `calculator.md` 的完整 Markdown 内容。\n2. 内容必须包含：\n    *   文档标题（如 `# 计算器使用说明`）。\n    *   对 `calculator.py` 模块的简要介绍。\n    *   每个已确认功能（`加法`、`减法`、`乘法`、`除法`）的详细说明，包括函数名、参数、返回值和功能描述。\n    *   为每个函数提供一个**完整的Python示例代码块**，展示如何导入 `calculator` 模块并调用相应函数，并打印结果。\n    *   确保所有 Markdown 格式（如代码块使用 ````python`、标题层级、列表）都正确无误。\n3. 将生成的完整 Markdown 内容写入并保存到 `calculator.md` 文件中。",
      "agent_name": "coder",
      "priority": 95,
      "phase": "execution",
      "expected_outcome": "`calculator.md` 文件成功生成，其内容完整、格式正确，包含所有函数的使用说明和可运行的示例代码，并通过后续的验证检查。",
      "metadata": {}
    },
    {
      "id": "recovery_351097",
      "name": "诊断并优化Markdown内容生成逻辑",
      "condition": "在执行 `修正并重新生成完整的Markdown使用说明文档` 规则后，`生成使用说明文档` 任务仍然失败，且失败详情仍为“Markdown内容字符串不完整”或“缺少关键示例代码和部分格式化内容”。",
      "action": "指示 `coder` 智能体：\n1. **深入分析**之前生成 `markdown_content` 失败的具体原因，特别是为什么内容会持续不完整或格式错误。\n2. **识别**生成逻辑中的潜在缺陷，例如：是否遗漏了某些函数信息、示例代码生成是否被截断、Markdown语法是否未正确应用、或者是否存在输出长度限制。\n3. **优化**内容生成策略，确保能够稳定地输出符合要求的完整 Markdown 字符串。\n4. 根据优化后的策略，**再次尝试**生成并保存 `calculator.md` 文件。",
      "agent_name": "coder",
      "priority": 85,
      "phase": "execution",
      "expected_outcome": "`coder` 智能体能够自我诊断并改进其内容生成逻辑，最终成功生成符合要求的 `calculator.md` 文件。",
      "metadata": {}
    }
  ],
  "version": 1,
  "status": "active",
  "modification_history": []
}