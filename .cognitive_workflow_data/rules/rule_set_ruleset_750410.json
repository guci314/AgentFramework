{
  "id": "ruleset_750410",
  "goal": "\n    开发一个简单的计算器程序，要求：\n    1. 实现加减乘除四个基本运算\n    2. 编写完整的单元测试\n    3. 运行测试，确保测试通过\n    4. 文件保存在calculator.py\n    ",
  "rules": [
    {
      "id": "rule_269103",
      "name": "implement_calculator_functions",
      "condition": "IF 需要实现加减乘除四个基本运算",
      "action": "THEN 在calculator.py中实现加法(add)、减法(subtract)、乘法(multiply)和除法(divide)四个函数，每个函数接受两个参数并返回计算结果",
      "agent_name": "coder",
      "priority": 90,
      "phase": "execution",
      "expected_outcome": "calculator.py中包含四个基本运算函数的实现",
      "metadata": {}
    },
    {
      "id": "rule_725925",
      "name": "write_unit_tests",
      "condition": "IF 需要为计算器编写完整的单元测试",
      "action": "THEN 在calculator.py中创建测试类CalculatorTest，为每个运算函数编写测试用例，覆盖正常情况和边界情况（如除数为零）",
      "agent_name": "tester",
      "priority": 80,
      "phase": "execution",
      "expected_outcome": "calculator.py中包含完整的单元测试代码",
      "metadata": {}
    },
    {
      "id": "rule_232493",
      "name": "run_and_verify_tests",
      "condition": "IF 需要运行测试并确保通过",
      "action": "THEN 执行calculator.py中的测试用例，检查所有测试是否通过，如有失败则调试修正代码",
      "agent_name": "tester",
      "priority": 70,
      "phase": "verification",
      "expected_outcome": "所有单元测试通过，计算器功能验证正确",
      "metadata": {}
    },
    {
      "id": "rule_309678",
      "name": "save_to_file",
      "condition": "IF 需要将代码保存到指定文件",
      "action": "THEN 确保所有代码和测试已正确写入calculator.py文件",
      "agent_name": "coder",
      "priority": 60,
      "phase": "verification",
      "expected_outcome": "完整的计算器程序保存在calculator.py中",
      "metadata": {}
    }
  ],
  "version": 1,
  "status": "active",
  "modification_history": []
}