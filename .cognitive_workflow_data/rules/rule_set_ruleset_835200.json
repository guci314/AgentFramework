{
  "id": "ruleset_835200",
  "goal": "Create a new directory for the project and initialize a new Python file named calculator.py",
  "rules": [
    {
      "id": "rule_001",
      "name": "Directory Existence Check",
      "condition": "No existing directory for the project",
      "action": "Verify if directory 'project' exists using os.path.exists()",
      "agent_name": "coder",
      "priority": 80,
      "phase": "execution",
      "expected_outcome": "Boolean confirmation of directory existence",
      "metadata": {}
    },
    {
      "id": "rule_002",
      "name": "Directory Creation",
      "condition": "Directory does not exist (rule_001 returns False)",
      "action": "Create directory using os.makedirs() with permissions 775",
      "agent_name": "coder",
      "priority": 90,
      "phase": "execution",
      "expected_outcome": "New directory 'project' created successfully",
      "metadata": {}
    },
    {
      "id": "rule_003",
      "name": "Directory Permission Check",
      "condition": "Directory exists (rule_001 returns True)",
      "action": "Verify directory has write permissions using os.access()",
      "agent_name": "coder",
      "priority": 85,
      "phase": "execution",
      "expected_outcome": "Directory write permissions confirmed",
      "metadata": {}
    },
    {
      "id": "rule_004",
      "name": "Virtual Environment Setup",
      "condition": "Directory exists and has write permissions (rule_003 passed)",
      "action": "Create Python virtual environment using venv module",
      "agent_name": "coder",
      "priority": 88,
      "phase": "execution",
      "expected_outcome": "Virtual environment created in project directory",
      "metadata": {}
    },
    {
      "id": "rule_005",
      "name": "File Initialization",
      "condition": "Virtual environment exists (rule_004 passed)",
      "action": "Create calculator.py with basic Python structure including docstring, imports and main function",
      "agent_name": "coder",
      "priority": 95,
      "phase": "execution",
      "expected_outcome": "calculator.py created with 644 permissions and complete Python structure",
      "metadata": {}
    },
    {
      "id": "rule_006",
      "name": "File Content Verification",
      "condition": "File creation attempted (rule_005 executed)",
      "action": "Verify file contains valid Python syntax and expected structure using ast.parse()",
      "agent_name": "coder",
      "priority": 85,
      "phase": "execution",
      "expected_outcome": "File verified with correct Python syntax and complete structure",
      "metadata": {}
    },
    {
      "id": "rule_007",
      "name": "Dependency Management",
      "condition": "After file initialization",
      "action": "Generate requirements.txt and install dependencies",
      "agent_name": "coder",
      "priority": 75,
      "phase": "execution",
      "expected_outcome": "Project dependencies properly documented and installed",
      "metadata": {}
    },
    {
      "id": "rule_008",
      "name": "Git Repository Initialization",
      "condition": "After file initialization",
      "action": "Initialize git repository and create .gitignore file",
      "agent_name": "coder",
      "priority": 70,
      "phase": "execution",
      "expected_outcome": "Git repository properly initialized",
      "metadata": {}
    },
    {
      "id": "rule_009",
      "name": "Conflict Resolution",
      "condition": "File already exists during rule_005 execution",
      "action": "Provide detailed diff of existing vs new content using difflib and prompt user for action",
      "agent_name": "coder",
      "priority": 90,
      "phase": "execution",
      "expected_outcome": "User makes informed decision based on comprehensive content comparison",
      "metadata": {}
    },
    {
      "id": "rule_010",
      "name": "Template Customization",
      "condition": "User provides file template content",
      "action": "Initialize calculator.py with custom template and validate Python syntax using ast.parse()",
      "agent_name": "coder",
      "priority": 88,
      "phase": "execution",
      "expected_outcome": "calculator.py created with validated custom content",
      "metadata": {}
    },
    {
      "id": "rule_011",
      "name": "File Backup",
      "condition": "Before overwriting existing file",
      "action": "Create timestamped backup of existing file with .bak extension",
      "agent_name": "coder",
      "priority": 82,
      "phase": "execution",
      "expected_outcome": "Backup file created with original content preserved",
      "metadata": {}
    },
    {
      "id": "rule_012",
      "name": "Agent Fallback",
      "condition": "Specified agent is unavailable",
      "action": "Switch to default 'coder' agent with detailed logging of the fallback including stack trace",
      "agent_name": "system",
      "priority": 100,
      "phase": "execution",
      "expected_outcome": "Workflow continues with available agent and complete fallback details logged",
      "metadata": {}
    }
  ],
  "version": 1,
  "status": "active",
  "modification_history": []
}