{
  "id": "ruleset_220142",
  "goal": "coder, please create a calculator program in `calculator.py` that can perform addition, subtraction, multiplication, and division.",
  "rules": [
    {
      "id": "rule_001",
      "name": "Generate Initial Calculator Code",
      "condition": "Workflow starts and 'calculator.py' does not exist.",
      "action": "Create 'calculator.py' with functions for addition, subtraction, multiplication, and division. Include basic input/output handling.",
      "agent_name": "coder",
      "priority": 90,
      "phase": "execution",
      "expected_outcome": "'calculator.py' file is created with the core calculator logic for all specified operations.",
      "metadata": {}
    },
    {
      "id": "rule_002",
      "name": "Create Test File Structure",
      "condition": "'calculator.py' exists and 'test_calculator.py' does not exist.",
      "action": "Create an empty 'test_calculator.py' file or a file with a basic test structure (e.g., using unittest or pytest framework).",
      "agent_name": "tester",
      "priority": 85,
      "phase": "execution",
      "expected_outcome": "'test_calculator.py' file is created, ready for test case implementation.",
      "metadata": {}
    },
    {
      "id": "rule_003",
      "name": "Implement Calculator Test Cases",
      "condition": "'calculator.py' exists and 'test_calculator.py' exists but contains no comprehensive tests for all operations.",
      "action": "Write comprehensive unit tests in 'test_calculator.py' covering addition, subtraction, multiplication, division, and edge cases (e.g., division by zero, non-numeric input handling).",
      "agent_name": "tester",
      "priority": 80,
      "phase": "execution",
      "expected_outcome": "'test_calculator.py' contains robust test cases for all specified calculator operations.",
      "metadata": {}
    },
    {
      "id": "rule_004",
      "name": "Execute Calculator Tests",
      "condition": "'calculator.py' and 'test_calculator.py' both exist and contain code.",
      "action": "Execute the tests in 'test_calculator.py' against 'calculator.py' and report the results.",
      "agent_name": "tester",
      "priority": 75,
      "phase": "execution",
      "expected_outcome": "Test results are generated, indicating pass/fail status for all implemented test cases.",
      "metadata": {}
    },
    {
      "id": "rule_005",
      "name": "Debug and Refine Calculator Code",
      "condition": "Previous test execution (rule_004) resulted in failures.",
      "action": "Analyze test failures, identify bugs or deficiencies in 'calculator.py', and implement necessary fixes and improvements to ensure correctness.",
      "agent_name": "coder",
      "priority": 95,
      "phase": "execution",
      "expected_outcome": "'calculator.py' is updated to address identified issues, aiming for all tests to pass on re-execution.",
      "metadata": {}
    },
    {
      "id": "rule_006",
      "name": "Final Verification and Project Completion",
      "condition": "All tests (from rule_004) pass, and no further issues are identified.",
      "action": "Perform a final review of 'calculator.py' to confirm it meets all requirements and declare the project complete.",
      "agent_name": "tester",
      "priority": 70,
      "phase": "execution",
      "expected_outcome": "Confirmation that the calculator program is fully functional, robust, and the task is completed successfully.",
      "metadata": {}
    }
  ],
  "version": 1,
  "status": "active",
  "modification_history": []
}